int = { ("+" | "-")? ~ ASCII_DIGIT+ }
float = @{ int ~ ("." ~ ASCII_DIGIT+) }

operation = _{ add | subtract | multiply | divide | power }
    add      = { "+" }
    subtract = { "-" }
    multiply = { "*" }
    divide   = { "/" }
    power    = { "^" }

expr = { term ~ (operation ~ term)* }
term = _{float | int  | func_call | array_index | var_name | string  | "(" ~ expr ~ ")" }

COMMENT = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }
WHITESPACE = _{ " "+ | "\t" | NEWLINE+}
reserved = {"print" | "if" | "else" | "while" | "true" | "false" | " " | "}" | "{" | ";" | ":"}

var_name = @{!reserved ~ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")*}

any = {"any"}
array_inst = _{(vint | vfloat | vstring | any) ~ "[]"}
piped = {"|" ~ var_name ~ "|"}
array_initial = {"[" ~ piped? ~ expr ~ ";" ~ expr ~ "]"}
array_definition = {array_inst ~ var_name ~ "=" ~ array_initial }
array_val = {"[" ~ list? ~ "]"}
array_index = {var_name ~"[" ~ expr ~ "]"}
var_type = {array_inst | vint | vfloat | vstring | vbool}
    vint = {"int"}
    vfloat = {"float"}
    vstring = {"string"}
    vbool = {"bool"}

string = ${ "\"" ~ inner ~ "\"" }
inner = @{ char* }
char = {
    !("\"" | "\\") ~ ANY
    | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
    | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}

boolops = _{eq | geq | leq | neq | lt | gt}
    eq = {"="}
    geq = {">="}
    leq = {"<="}
    neq = {"!="}
    lt = {"<"}
    gt = {">"}

bool_joiners = _{and | or}
    and = {"∧"}
    or = {"∨"}

not = _{"¬"}
exprp = _{"("? ~ expr ~ ")"?}
boolexp = {exprp ~ boolops ~ exprp}
boolconst = _{tru | fal}
    tru = {"true"}
    fal = {"false"}

boolexpr = { "("? ~(boolterm | boolnot) ~ ")"? ~ (bool_joiners ~ (boolterm | boolnot))* ~ ")"?}
boolterm = {boolconst | boolexp | "(" ~ boolexp ~ ")" }
boolnot = {not ~ (("(" ~ boolterm ~ ")") | boolterm) }

del = {"del" ~ "(" ~ var_name ~ ")"}
skip = {"skip"}
print = {"print" ~ "(" ~ expr ~ ")"}
builtin = {del | print}

body = _{statement+}
ifstm = {"if" ~ boolexpr ~ "{" ~ body+ ~ "}"}
whilestm = {"while" ~ boolexpr ~ "{" ~ body+ ~ "}"}
parse_error = {ASCII_ALPHANUMERIC*}

dec = {var_type ~ var_name}
params = {dec ~ ("," ~ dec)*}
return_stm = {"return" ~ expr ~ ";"}
func_def = {"fn" ~ var_name ~ "(" ~ params? ~ ")" ~ "->" ~ var_type ~ "{" ~ body ~ "}"}

item = _{int | float | var_type}
list = {expr ~ ("," ~ expr)*}
func_call = {var_name ~ "(" ~ list ~ ")"}


assignment = {(array_index | (var_type? ~ var_name)) ~ "=" ~ (expr | string)}
statement = _{((builtin | skip | array_definition |  assignment) ~ ";") | (return_stm | func_def | ifstm | whilestm) }
program = _{ SOI ~ func_def* ~ EOI }
