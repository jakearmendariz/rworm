// the grammar of worm
// using the pest parser it is defined here to be turned into a rust structure in parser.rs
operation = _{ add | subtract | multiply | divide | power | eq | geq | leq | neq | lt | gt | and | or}
    add      = { "+" }
    subtract = { "-" }
    multiply = { "*" }
    divide   = { "/" }
    power    = { "^" }
    modulus  = { "%" }
    lt       = { "<" }
    gt       = { ">" }
    and      = { "&" }
    or       = { "|" }
    eq       = { "==" }
    geq      = { ">=" }
    leq      = { "<=" }
    neq      = { "!=" }

unary_op = _{ not }
    not      = { "!" }

unary_expr = { unary_op ~ expr }

int = { ("+" | "-")? ~ ASCII_DIGIT+ }
expr = { term ~ (operation ~ term)* }
term = _{ int | char | func_call | identifier | string | hash_obj | array_value | bool_literals | "(" ~ expr ~ ")" | unary_expr }
identifier = { var_name ~ (("." ~ var_name) | ("[" ~ expr ~ "]"))* }

COMMENT = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }
WHITESPACE = _{ " "+ | "\t" | NEWLINE+}
reserved = {"print" | "if" | "else" | "while" | "true" | "false" | " " | "}" | "{" | ";" | ":"}

var_name = @{!reserved ~ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")*}

array_inst = {(vint | vchar | vstring | hmap | structure) ~ "[]"}
piped = {"|" ~ var_name ~ "|"}
array_initial = {"[" ~ piped? ~ expr ~ ";" ~ expr ~ "]"}
array_literal = {"[" ~ list? ~ "]"}
array_empty =  {"[" ~ var_type ~ "]"}
array_value = { array_empty | array_initial | array_literal }

structure_items = {(var_name ~ ":" ~ var_type) ~ ("," ~ (var_name ~ ":" ~ var_type))*}
structure_def = {"struct" ~ var_name ~ "{" ~ structure_items ~ ","? ~ "}"}

var_type = {array_inst | vint | vstring | vbool | vchar | hmap | structure}
    vint = {"int"}
    vstring = {"string"}
    vbool = {"bool"}
    vchar = {"char"}
    hmap = {"map" ~ "<" ~ var_type ~ "," ~ var_type ~ ">"}
    structure = {"struct" ~ "<" ~ var_name ~ ">"}

hash_obj = {"{" ~ var_type ~ ":" ~ var_type ~ "}"}
string = ${ "\"" ~ inner ~ "\"" }
inner = @{ chars* }
chars = {
    !("\"" | "\\") ~ ANY
    | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
    | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}
char = ${"\'" ~ chars ~ "\'"}

bool_literals = _{tru | fal}
    tru = {"true"}
    fal = {"false"}


del = {"del" ~ "(" ~ var_name ~ ")"}
skip = {"skip"}
print = {"print" ~ "(" ~ expr ~ ")"}
static_print = {"static_print" ~ "(" ~ expr ~ ")"}
assert = {"assert(" ~ expr}
builtin = {del | print | static_print | assert}

body = _{statement+}
ifstm = {if_stm ~ elseif_stm* ~ else_stm?}
if_stm = {"if" ~ expr ~ "{" ~ body+ ~ "}"}
elseif_stm = {"else if" ~ expr ~ "{" ~ body ~ "}"}
else_stm = {"else" ~ "{" ~ body ~ "}"}

whilestm = {"while" ~ expr ~ "{" ~ body+ ~ "}"}
parse_error = {ASCII_ALPHANUMERIC*}

dec = {var_type ~ var_name}
params = {dec ~ ("," ~ dec)*}
return_stm = {"return" ~ expr ~ ";"}
func_def = {"fn" ~ var_name ~ "(" ~ params? ~ ")" ~ "->" ~ var_type ~ "{" ~ body ~ "}"}

import_stm = {"import" ~ string ~ ";"}

item = _{int | var_type}
list = {expr ~ ("," ~ expr)*}
func_call = {var_name ~ "(" ~ list? ~ ")"}

assignment = {((var_type ~ var_name) | identifier) ~ "=" ~ (expr | string | array_initial)}
statement = _{((builtin | skip |  assignment) ~ ";") | (return_stm | func_def | ifstm | whilestm) }
program = _{ SOI ~ (import_stm | structure_def |  func_def)* ~ EOI }

